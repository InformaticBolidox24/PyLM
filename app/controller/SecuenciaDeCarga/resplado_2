import pandas as pd
import io
from fastapi import APIRouter, UploadFile, HTTPException, File
from datetime import datetime, timedelta

# importa los controllers
from app.controller.Concepto import PostConcepto, GetConcepto
from app.controller.Concepto import GetLastID as idConcepto
from app.controller.PlanMovimiento import PostPlanMovimiento

from app.controller.Secuencia import PostSecuencia
from app.controller.Secuencia import GetLastID as idSecuencia
from app.controller.Movimiento import PostMovimiento, GetLastID as idMovimiento
from app.controller.PlanMovimiento.PostPlanMovimiento import crear_plan_movimiento

# importa los schemas
from app.schemas.SchemaConcepto import ConceptoCreateModel, LastID
from app.schemas.SchemaSecuencia import SecuenciaCreateModel, LastID
from app.schemas.SchemaMovimiento import MovimientoCreateModel, LastID
from app.schemas.SchemaPlanMovimineto import PlanMovimientoCreateModel, LastID

router = APIRouter()

def clean_dataframe(df):
    df = df.dropna(axis=1, how='all')
    df = df.loc[:, ~(df.columns.str.contains('Unnamed') & df.isna().all())]
    return df

def extract_column_data(df, column_name):
    return df[column_name].dropna().unique().tolist()

def find_row_by_text(df, text):
    for index, row in df.iterrows():
        if row.astype(str).str.contains(text).any():
            return row
    return None

def identify_date_columns(df):
    date_columns = []
    for col in df.columns:
        if pd.to_datetime(df[col], errors='coerce').notna().sum() > 0:
            date_columns.append(col)
    return date_columns

def get_current_month_days():
    today = datetime.today()
    start_date = datetime(today.year, today.month, 1)
    days = [start_date + timedelta(days=i) for i in range(31)]
    return days

def listar_conceptos():
    try:
        concepto = GetConcepto.listar_conceptos()
        return concepto
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al obtener los Conceptos: {str(e)}")

def extraer_nombres_conceptos(conceptos):
    return [concepto.nombre for concepto in conceptos]

@router.post("/PostCargarPlanMinero/")
async def cargar_datos_desde_excel(file: UploadFile = File(...)):
    if not file.filename.endswith('.xlsx'):
        raise HTTPException(status_code=400, detail="El archivo no es un archivo .xlsx válido.")

    try:
        # Leer el archivo completo y mantenerlo en memoria
        contents = await file.read()
        data = io.BytesIO(contents)
        df = pd.read_excel(data, sheet_name='DETALLE FINAL DIARIO', engine='openpyxl')
        df = clean_dataframe(df)

        # Obtener los datos en memoria
        column_data = extract_column_data(df, df.columns[0])
        conceptos = extract_column_data(df, df.columns[1])

        # Insertar secuencias y almacenar los IDs en memoria
        secuencia_ids = []
        for item in column_data:
            secuencia_data = SecuenciaCreateModel(descripcion=str(item))
            try:
                PostSecuencia.crear_secuencia(secuencia_data)
                id_secuencia = idSecuencia.LastID()
                if id_secuencia:
                    secuencia_ids.append(id_secuencia)
            except HTTPException as e:
                continue

        # Insertar conceptos y almacenar los IDs en memoria
        concepto_ids = {}
        for item in conceptos:
            if item != 'FECHA':
                concepto_data = ConceptoCreateModel(nombre=item)
                PostConcepto.crear_concepto(concepto_data)
                id_concepto = idConcepto.LastID()
                if id_concepto:
                    concepto_ids[item] = id_concepto

        # Procesar movimientos y plan de movimientos
        movimientos_data = []
        plan_movimientos_data = []
        dias_del_mes = get_current_month_days()
        for item, id_concepto in concepto_ids.items():

            for id_secuencia in secuencia_ids:
                row_data = find_row_by_text(df, item)
                if row_data is None:
                    continue
                numeric_data = pd.to_numeric(row_data.iloc[3:34], errors='coerce').dropna()

                for value, dia in zip(numeric_data, dias_del_mes):

                    movimiento_data = MovimientoCreateModel(id_concepto=id_concepto, id_secuencia=id_secuencia, valor=value)
                    PostMovimiento.crear_movimiento(movimiento_data)
                    id_movimiento = idMovimiento.LastID()
                    if not id_movimiento:
                        raise HTTPException(status_code=500, detail="Error al obtener el ID del último movimiento")

                    plan_movimiento_data = PlanMovimientoCreateModel(id_movimiento=id_movimiento, fecha=dia.strftime('%Y-%m-%d'))
                    plan_movimientos_data.append(plan_movimiento_data)

        # Insertar plan de movimientos en lote
        for plan_movimiento in plan_movimientos_data:
            PostPlanMovimiento.crear_plan_movimiento(plan_movimiento)

    except Exception as e:
        print("Excepción:", str(e))
        raise HTTPException(status_code=500, detail=f"Error al procesar el archivo Excel: {str(e)}")