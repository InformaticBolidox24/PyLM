import pandas as pd
import io
from fastapi import APIRouter, UploadFile, HTTPException, File
from datetime import datetime, timedelta

#importa los controllers
from app.controller.Concepto import PostConcepto
from app.controller.Concepto import GetLastID as idConcepto
from app.controller.PlanMovimiento import PostPlanMovimiento

from app.controller.Secuencia import PostSecuencia
from app.controller.Secuencia import GetLastID as idSecuencia
from app.controller.Movimiento import PostMovimiento, GetLastID as idMovimiento
from app.controller.PlanMovimiento.PostPlanMovimiento import crear_plan_movimiento

#importa los schemas
from app.schemas.SchemaConcepto import ConceptoCreateModel, LastID
from app.schemas.SchemaSecuencia import SecuenciaCreateModel, LastID
from app.schemas.SchemaMovimiento import MovimientoCreateModel, LastID
from app.schemas.SchemaPlanMovimineto import PlanMovimientoCreateModel, LastID



router = APIRouter()

def clean_dataframe(df):
    """ Función para limpiar DataFrame inicial (DataFrame A). """
    df = df.dropna(axis=1, how='all')  # Eliminar columnas completamente vacías
    df = df.loc[:, ~(df.columns.str.contains('Unnamed') & df.isna().all())]  # Eliminar 'Unnamed' sin datos útiles
    return df

def extract_column_data(df, column_name):
    """ Función para extraer datos únicos de una columna específica del DataFrame. """
    return df[column_name].dropna().unique().tolist()

def find_row_by_text(df, text):
    """ Función para encontrar la fila que contiene un texto específico. """
    for index, row in df.iterrows():
        if row.astype(str).str.contains(text).any():
            return row
    return None

def identify_date_columns(df):
    # Identificar las columnas que contienen fechas
    date_columns = []
    for col in df.columns:
        if pd.to_datetime(df[col], errors='coerce').notna().sum() > 0:
            date_columns.append(col)
    return date_columns


def get_current_month_days():
    """ Función para capturar el mes actual y generar los 30 días. """
    today = datetime.today()
    start_date = datetime(today.year, today.month, 1)
    days = [start_date + timedelta(days=i) for i in range(30)]
    return days



@router.post("/PostCargarPlanMinero/")
async def cargar_datos_desde_excel(file: UploadFile = File(...)):
    if not file.filename.endswith('.xlsx'):
        raise HTTPException(status_code=400, detail="El archivo no es un archivo .xlsx válido.")

    try:


        contents = await file.read()
        data = io.BytesIO(contents)
        df = pd.read_excel(data, sheet_name='DETALLE LB DIARIO', engine='openpyxl')  # Especificar el nombre de la hoja
        df = clean_dataframe(df)

        #########################################################################
        #
        # inserta el concepto
        #
        #########################################################################

        # Identificar el nombre de la columna D
        #column_name = df.columns[1]  # Índice 3 corresponde a la columna D
        #column_data = extract_column_data(df, column_name)
        #for item in column_data:
         #   print(item)
            #concepto_data = ConceptoCreateModel(nombre=item)
            #response = PostConcepto.crear_concepto(concepto_data)

        #########################################################################
        #
        # inserta la secuencia
        #
        #########################################################################
        #column_name = df.columns[0]
        #column_data = extract_column_data(df, column_name)
        #for item in column_data:
            #secuencia_data = SecuenciaCreateModel(descripcion=str(item))
            #response = PostSecuencia.crear_secuencia(secuencia_data)

        #########################################################################
        #
        # inserta la movimiento
        #
        #########################################################################

        #id_concepto = idConcepto.LastID()
        #id_secuencia = idSecuencia.LastID()

        #row_data = find_row_by_text(df, 'Tonnes')
        #if row_data is None:
        #    raise HTTPException(status_code=404, detail="No se encontró una fila que contenga 'Tonnes'.")

        # Filtrar solo los valores numéricos
        #numeric_data = pd.to_numeric(row_data, errors='coerce').dropna()

        #for item in numeric_data:
        #    movimiento_data = MovimientoCreateModel(id_concepto=id_concepto, id_secuencia=id_secuencia, valor=item)
        #    response = PostMovimiento.crear_movimiento(movimiento_data)

        #########################################################################
        #
        # inserta el plan movimineto
        #
        #########################################################################

        # Capturar los 30 días del mes actual
        id_movimiento = idMovimiento.LastID()
        dias_del_mes = get_current_month_days()

        # Mostrar los días
        for dia in dias_del_mes:
            movimiento_data = PlanMovimientoCreateModel(id_movimiento=id_movimiento, fecha=dia.strftime('%Y-%m-%d'))
            response = PostPlanMovimiento.crear_plan_movimiento(movimiento_data)
            print(response)




    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al procesar el archivo Excel: {str(e)}")
